import express from 'express';
import TelegramBot from 'node-telegram-bot-api';
import { body, validationResult } from 'express-validator';
import { pool } from '../db.js';

const router = express.Router();

// Initialize Telegram bot
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: false });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º Telegram –∞–¥–º–∏–Ω–∞–º
async function sendToAllTelegramAdmins(message) {
  try {
    const client = await pool.getConnection();
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –∞–¥–º–∏–Ω–æ–≤
      const [admins] = await client.query('SELECT chat_id, name FROM telegram_admins WHERE is_active = 1');
      
      if (admins.length === 0) {
        console.log('‚ö†Ô∏è  –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö Telegram –∞–¥–º–∏–Ω–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
        return;
      }
      
      console.log(`üì± –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è ${admins.length} Telegram –∞–¥–º–∏–Ω–∞–º...`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
      for (const admin of admins) {
        try {
          await bot.sendMessage(admin.chat_id, message, {
            parse_mode: 'Markdown'
          });
          console.log(`‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω—É: ${admin.name} (${admin.chat_id})`);
        } catch (error) {
          console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É ${admin.name} (${admin.chat_id}):`, error.message);
        }
      }
    } finally {
      client.release();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ Telegram –∞–¥–º–∏–Ω–æ–≤:', error.message);
  }
}

// Validation middleware
const contactValidation = [
  body('name')
    .trim()
    .isLength({ min: 2, max: 50 })
    .withMessage('–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤'),
  body('phone')
    .trim()
    .matches(/^[\+]?[0-9\s\-\(\)]{7,25}$/)
    .withMessage('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'),
  body('message')
    .trim()
    .isLength({ min: 5, max: 1000 })
    .withMessage('–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –æ—Ç 5 –¥–æ 1000 —Å–∏–º–≤–æ–ª–æ–≤')
];

// Contact form endpoint
router.post('/contact', contactValidation, async (req, res) => {
  try {
    // Check validation errors
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
      console.log('Validation errors:', errors.array());
      return res.status(400).json({
        success: false,
        message: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
        errors: errors.array()
      });
    }

    const { name, phone, message } = req.body;

    // Format message for Telegram
    const telegramMessage = `üìû *–ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞*

üë§ *–ò–º—è:* ${name}
üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* ${phone}

üí¨ *–°–æ–æ–±—â–µ–Ω–∏–µ:*
${message}

‚è∞ *–í—Ä–µ–º—è:* ${new Date().toLocaleString('ru-RU', {
      timeZone: 'Europe/Minsk',
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit'
    })}`;

    // Send message to all active Telegram admins
    if (process.env.TELEGRAM_BOT_TOKEN) {
      await sendToAllTelegramAdmins(telegramMessage);
    }

    res.json({
      success: true,
      message: '–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.'
    });

  } catch (error) {
    console.error('Contact form error:', error);
    res.status(500).json({
      success: false,
      message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    });
  }
});

export default router;
